import React, { useState } from 'react';
import { 
  View, 
  ScrollView, 
  TouchableOpacity, 
  Alert, 
  TextInput,
  Modal,
  ActivityIndicator
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import Clipboard from '@react-native-clipboard/clipboard';
import { Background } from '@components/Background';
import { Text } from '@/shared/components/Text';
import { StorageService } from '@/shared/services/storageService';

export const BackupRestoreScreen = () => {
  const navigation = useNavigation();
  const [isRestoreModalVisible, setIsRestoreModalVisible] = useState(false);
  const [isBackupModalVisible, setIsBackupModalVisible] = useState(false);
  const [restoreText, setRestoreText] = useState('');
  const [backupText, setBackupText] = useState('');

  // Î∞±ÏóÖ Í∏∞Îä•
  const handleBackup = async () => {
    try {
      const backupData = await StorageService.exportAllDiaries();
      setBackupText(backupData);
      setIsBackupModalVisible(true);
    } catch (error) {
      Alert.alert('Ïò§Î•ò', error instanceof Error ? error.message : 'Î∞±ÏóÖ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } 
  };

  // Î∞±ÏóÖ Îç∞Ïù¥ÌÑ∞ Î≥µÏÇ¨
  const handleCopyBackup = () => {
    try {
      Clipboard.setString(backupText);
      Alert.alert('ÏôÑÎ£å', 'Î∞±ÏóÖ Îç∞Ïù¥ÌÑ∞Í∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§!');
    } catch (error) {
      Alert.alert(
        'Î≥µÏÇ¨ Ïã§Ìå®', 
        'ÏïÑÎûò ÌÖçÏä§Ìä∏Î•º Í∏∏Í≤å ÎàåÎü¨ÏÑú Ï†ÑÏ≤¥ ÏÑ†ÌÉù ÌõÑ ÏàòÎèôÏúºÎ°ú Î≥µÏÇ¨Ìï¥Ï£ºÏÑ∏Ïöî.'
      );
    }
  };

  // ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóêÏÑú Î∂ôÏó¨ÎÑ£Í∏∞
  const handlePasteFromClipboard = async () => {
    try {
      const clipboardText = await Clipboard.getString();
      if (clipboardText.trim()) {
        setRestoreText(clipboardText);
        Alert.alert('ÏôÑÎ£å', 'ÌÅ¥Î¶ΩÎ≥¥Îìú ÎÇ¥Ïö©Ïù¥ Î∂ôÏó¨ÎÑ£Ïñ¥Ï°åÏäµÎãàÎã§!');
      } else {
        Alert.alert('ÏïåÎ¶º', 'ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê ÌÖçÏä§Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§.');
      }
    } catch (error) {
      Alert.alert('Ïò§Î•ò', 'ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóêÏÑú ÏùΩÏñ¥Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  // Î≥µÏõê Í∏∞Îä•
  const handleRestore = async (overwrite: boolean = false) => {
    if (!restoreText.trim()) {
      Alert.alert('ÏïåÎ¶º', 'Î≥µÏõêÌï† Îç∞Ïù¥ÌÑ∞Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    try {
      const result = await StorageService.importDiaries(restoreText, overwrite);
      
      setIsRestoreModalVisible(false);
      setRestoreText('');
      
      Alert.alert(
        'Î≥µÏõê ÏôÑÎ£å',
        `ÏÑ±Í≥µ: ${result.success}Í∞ú\nÍ±¥ÎÑàÎúÄ: ${result.skipped}Í∞ú\nÏò§Î•ò: ${result.errors}Í∞ú`
      );
    } catch (error) {
      Alert.alert('Ïò§Î•ò', error instanceof Error ? error.message : 'Î≥µÏõê Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  // Î≥µÏõê ÌôïÏù∏ (ÎçÆÏñ¥Ïì∞Í∏∞ ÏòµÏÖò)
  const handleRestoreConfirm = () => {
    Alert.alert(
      'Î≥µÏõê Î∞©Ïãù ÏÑ†ÌÉù',
      'Í∏∞Ï°¥ ÏùºÍ∏∞ÏôÄ ÎÇ†ÏßúÍ∞Ä Í≤πÏπòÎäî Í≤ΩÏö∞ Ïñ¥ÎñªÍ≤å ÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      [
        {
          text: 'Í±¥ÎÑàÎõ∞Í∏∞',
          onPress: () => handleRestore(false),
        },
        {
          text: 'ÎçÆÏñ¥Ïì∞Í∏∞',
          onPress: () => handleRestore(true),
          style: 'destructive',
        },
        {
          text: 'Ï∑®ÏÜå',
          style: 'cancel',
        },
      ]
    );
  };

  const backupModal = () => {
      /* Î∞±ÏóÖ Í≤∞Í≥º Î™®Îã¨ */

    return (
  <Modal
  visible={isBackupModalVisible}
  animationType="slide"
  presentationStyle="pageSheet"
>
  <View className="flex-1 bg-white mb-8">
    <View className="flex-row justify-between items-center p-4 border-b border-gray-200">
      <Text text="Î∞±ÏóÖ Îç∞Ïù¥ÌÑ∞" type="semibold" className="text-textBlack text-lg" />
      <TouchableOpacity onPress={() => setIsBackupModalVisible(false)}>
        <Text text="Îã´Í∏∞" type="regular" className="text-gray-500" />
      </TouchableOpacity>
    </View>
    
    <ScrollView className="flex-1 p-4 bg-r">
    <View className="flex-row justify-between items-center mb-3">
            <Text 
              text="ÏïÑÎûò ÌÖçÏä§Ìä∏Î•º Î≥µÏÇ¨Ìï¥ÏÑú Ï†ÄÏû•Ìï¥Ï£ºÏÑ∏Ïöî." 
              type="regular" 
              className="text-textBlack flex-1" 
            />
            <TouchableOpacity
              onPress={() => Alert.alert(
                'Î≥µÏÇ¨ Î∞©Î≤ï', 
                'ÌÖçÏä§Ìä∏Î•º Í∏∏Í≤å ÎàåÎü¨ÏÑú Ï†ÑÏ≤¥ ÏÑ†ÌÉù ÌõÑ Î≥µÏÇ¨ÌïòÍ±∞ÎÇò ÏïÑÎûò \'Î≥µÏÇ¨ÌïòÍ∏∞\'Î≤ÑÌäºÏùÑ ÎàåÎü¨ Î≥µÏÇ¨ÌïòÏÑ∏Ïöî'
              )}
              className="ml-2 bg-blue-500 px-3 py-1 rounded"
            >
              <Text text="ÎèÑÏõÄÎßê" type="regular" className="text-white text-sm" />
            </TouchableOpacity>
          </View>
      <TextInput
        value={backupText}
        multiline
        selectTextOnFocus
        className="flex-1 border border-gray-300 rounded-lg p-3 text-xs font-mono bg-gray-50"
        style={{ minHeight: 400 }}
      />
    </ScrollView>
    
    <View className="p-4 border-t border-gray-200">
    <TouchableOpacity
            onPress={handleCopyBackup}
            className="bg-blue-500 p-4 rounded-xl "
            disabled={!backupText.trim()}
          >
            <Text 
              text="Î≥µÏÇ¨ÌïòÍ∏∞" 
              type="black" 
              className={`text-center text-background`} 
            />
          </TouchableOpacity>
    </View>
  </View>
</Modal>
    )
  }
  const restoreModal = () => {
    return (
      /* Î≥µÏõê ÏûÖÎ†• Î™®Îã¨ */
      <Modal
      visible={isRestoreModalVisible}
      animationType="slide"
      presentationStyle="pageSheet"
    >
      <View className="flex-1 bg-white mb-8">
        <View className="flex-row justify-between items-center p-4 border-b border-gray-200">
          <Text text="ÏùºÍ∏∞ Î≥µÏõê" type="semibold" className="text-textBlack text-lg" />
          <TouchableOpacity onPress={() => setIsRestoreModalVisible(false)}>
            <Text text="Îã´Í∏∞" type="regular" className="text-gray-500" />
          </TouchableOpacity>
        </View>
        
        <View className="flex-1 p-4">
          <View className="flex-row justify-between items-center mb-3">
            <Text 
              text="Î∞±ÏóÖÎêú JSON Îç∞Ïù¥ÌÑ∞Î•º ÏïÑÎûòÏóê Î∂ôÏó¨ÎÑ£ÏúºÏÑ∏Ïöî:" 
              type="regular" 
              className="text-textBlack flex-1" 
            />
            <TouchableOpacity
              onPress={handlePasteFromClipboard}
              className="ml-2 bg-blue-500 px-3 py-1 rounded"
            >
              <Text text="Î∂ôÏó¨ÎÑ£Í∏∞" type="regular" className="text-white text-sm" />
            </TouchableOpacity>
          </View>
          <TextInput
            value={restoreText}
            onChangeText={setRestoreText}
            multiline
            placeholder="Ïó¨Í∏∞Ïóê Î∞±ÏóÖ Îç∞Ïù¥ÌÑ∞Î•º Î∂ôÏó¨ÎÑ£ÏúºÏÑ∏Ïöî..."
            className="flex-1 border border-gray-300 rounded-lg p-3 text-xs font-mono"
            style={{ minHeight: 300 }}
          />
        </View>
        
        <View className="p-4 border-t border-gray-200">
          <TouchableOpacity
            onPress={handleRestoreConfirm}
            className="bg-blue-500 p-4 rounded-xl "
            disabled={!restoreText.trim()}
          >
            <Text 
              text="Î≥µÏõêÌïòÍ∏∞" 
              type="black" 
              className={`text-center text-background`} 
            />
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
    )
  }
  return (
    <Background isStatusBarGap={true} isTabBarGap={false} isImage={2}>
         {/* Ìó§Îçî ÌÉ≠Î∞î */}
         <View className="flex-row items-center justify-between px-4 py-4 bg-white">
          <TouchableOpacity 
            onPress={() => navigation.goBack()}
            className="flex-row items-center justify-center"
            activeOpacity={0.7}
          >
            <Text text="‚Äπ " type="semibold" className="text-textBlack text-xl" />
            <Text text="Îí§Î°úÍ∞ÄÍ∏∞" type="semibold" className="text-textBlack text-xl" />
          </TouchableOpacity>
                  
          <View className="w-8" />
        </View>
      <View className="flex-1 pt-12">
       

        <ScrollView className="flex-1 px-4" showsVerticalScrollIndicator={false}>
          {/* ÏÑ§Î™Ö ÏòÅÏó≠ */}
          <View className="mb-6 p-4 bg-background/80 rounded-xl">
            <Text 
              text={`Ïï±Ïóê Ï†ÄÏû•Îêú ÎÇ¥Ïö©ÏùÑ ÌïúÎààÏóê Î≥º Ïàò ÏûàÎäî ÌÖçÏä§Ìä∏ ÌòïÌÉúÏùò ÌååÏùºÎ°ú Ï†ÄÏû•ÌïòÍ±∞ÎÇò Î∂àÎü¨Ïò¨ Ïàò ÏûàÎäî Í∏∞Îä•ÏûÖÎãàÎã§.

Î∞±ÏóÖÌïòÍ∏∞: ÏßÄÍ∏à Ïï±Ïóê ÏûàÎäî Îç∞Ïù¥ÌÑ∞Î•º ÌÖçÏä§Ìä∏Î°ú Î≥ÄÌôòÌï¥ Î≥µÏÇ¨¬∑Ï†ÄÏû•Ìï† Ïàò ÏûàÏñ¥Ïöî.

Î≥µÏõêÌïòÍ∏∞: Ïù¥Ï†ÑÏóê Ï†ÄÏû•Ìï¥Îëî ÌÖçÏä§Ìä∏Î•º Î∂ôÏó¨ÎÑ£ÏúºÎ©¥ Îç∞Ïù¥ÌÑ∞Î•º Îã§Ïãú Î∂àÎü¨Ïò¨ Ïàò ÏûàÏñ¥Ïöî.

Ïù¥ Í∏∞Îä•ÏùÑ ÏÇ¨Ïö©ÌïòÎ©¥ Í∏∞Í∏∞Î•º Î∞îÍæ∏Í±∞ÎÇò Ïï±ÏùÑ Îã§Ïãú ÏÑ§ÏπòÌï¥ÎèÑ Îç∞Ïù¥ÌÑ∞Î•º ÏâΩÍ≤å ÏòÆÍ∏∏ Ïàò ÏûàÏñ¥Ïöî.`}
              type="regular" 
              className="text-textBlack mb-2" 
            />

            <Text 
              text="üí° Î∞±ÏóÖ Îç∞Ïù¥ÌÑ∞Îäî Ïπ¥Ïπ¥Ïò§ÌÜ°, Î©îÎ™®Ïû• Îì±ÏúºÎ°ú ÏïàÏ†ÑÌïòÍ≤å Î≥¥Í¥ÄÌïòÏÑ∏Ïöî" 
              type="regular" 
              className="text-gray-600 text-sm" 
            />
          </View>
           {/* Î∞±ÏóÖ Î≤ÑÌäº ÏòÅÏó≠ */}
            <View className="flex-row justify-between items-center">         
            <TouchableOpacity
                onPress={handleBackup}
                className=" p-4 bg-white/80 rounded-xl shadow-sm border border-blue-100 flex-1"
                activeOpacity={0.7}
            >
                <Text text="Î∞±ÏóÖÌïòÍ∏∞" type="semibold" className="text-black text-center text-xl " />
            </TouchableOpacity>
            <View className="w-4"/>
            <TouchableOpacity
                onPress={() => setIsRestoreModalVisible(true)}
                className=" p-4 bg-white/80 rounded-xl shadow-sm border border-blue-100 flex-1"
                activeOpacity={0.7}
            >
                <Text text="Î≥µÏõêÌïòÍ∏∞" type="semibold" className="text-black text-center text-xl" />
            </TouchableOpacity>
            </View>
        </ScrollView>

      
        {backupModal()}
        {restoreModal()}
      </View>
    </Background>
  );
};
